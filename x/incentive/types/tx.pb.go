// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hhand/incentive/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSendCreateBribe struct {
	Proposer         string `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Title            string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Block            uint64 `protobuf:"varint,7,opt,name=block,proto3" json:"block,omitempty"`
	Denom            string `protobuf:"bytes,8,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount           uint64 `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	Chain            uint64 `protobuf:"varint,10,opt,name=chain,proto3" json:"chain,omitempty"`
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Port             string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	ChannelID        string `protobuf:"bytes,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	TimeoutTimestamp uint64 `protobuf:"varint,4,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
}

func (m *MsgSendCreateBribe) Reset()         { *m = MsgSendCreateBribe{} }
func (m *MsgSendCreateBribe) String() string { return proto.CompactTextString(m) }
func (*MsgSendCreateBribe) ProtoMessage()    {}
func (*MsgSendCreateBribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_618c405c851bfbc6, []int{0}
}
func (m *MsgSendCreateBribe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCreateBribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCreateBribe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCreateBribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCreateBribe.Merge(m, src)
}
func (m *MsgSendCreateBribe) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCreateBribe) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCreateBribe.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCreateBribe proto.InternalMessageInfo

func (m *MsgSendCreateBribe) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgSendCreateBribe) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgSendCreateBribe) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *MsgSendCreateBribe) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgSendCreateBribe) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgSendCreateBribe) GetChain() uint64 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *MsgSendCreateBribe) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendCreateBribe) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *MsgSendCreateBribe) GetChannelID() string {
	if m != nil {
		return m.ChannelID
	}
	return ""
}

func (m *MsgSendCreateBribe) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

type MsgDistributeBribeRequest struct {
	To     string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgDistributeBribeRequest) Reset()         { *m = MsgDistributeBribeRequest{} }
func (m *MsgDistributeBribeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDistributeBribeRequest) ProtoMessage()    {}
func (*MsgDistributeBribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_618c405c851bfbc6, []int{1}
}
func (m *MsgDistributeBribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDistributeBribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDistributeBribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDistributeBribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDistributeBribeRequest.Merge(m, src)
}
func (m *MsgDistributeBribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDistributeBribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDistributeBribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDistributeBribeRequest proto.InternalMessageInfo

func (m *MsgDistributeBribeRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgDistributeBribeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgDistributeBribeRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type MsgDistributeBribeResponse struct {
}

func (m *MsgDistributeBribeResponse) Reset()         { *m = MsgDistributeBribeResponse{} }
func (m *MsgDistributeBribeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDistributeBribeResponse) ProtoMessage()    {}
func (*MsgDistributeBribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_618c405c851bfbc6, []int{2}
}
func (m *MsgDistributeBribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDistributeBribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDistributeBribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDistributeBribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDistributeBribeResponse.Merge(m, src)
}
func (m *MsgDistributeBribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDistributeBribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDistributeBribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDistributeBribeResponse proto.InternalMessageInfo

type MsgSendCreateBribeResponse struct {
}

func (m *MsgSendCreateBribeResponse) Reset()         { *m = MsgSendCreateBribeResponse{} }
func (m *MsgSendCreateBribeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendCreateBribeResponse) ProtoMessage()    {}
func (*MsgSendCreateBribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_618c405c851bfbc6, []int{3}
}
func (m *MsgSendCreateBribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendCreateBribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendCreateBribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendCreateBribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendCreateBribeResponse.Merge(m, src)
}
func (m *MsgSendCreateBribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendCreateBribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendCreateBribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendCreateBribeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSendCreateBribe)(nil), "hhand.incentive.MsgSendCreateBribe")
	proto.RegisterType((*MsgDistributeBribeRequest)(nil), "hhand.incentive.MsgDistributeBribeRequest")
	proto.RegisterType((*MsgDistributeBribeResponse)(nil), "hhand.incentive.MsgDistributeBribeResponse")
	proto.RegisterType((*MsgSendCreateBribeResponse)(nil), "hhand.incentive.MsgSendCreateBribeResponse")
}

func init() { proto.RegisterFile("hhand/incentive/tx.proto", fileDescriptor_618c405c851bfbc6) }

var fileDescriptor_618c405c851bfbc6 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xc5, 0xe6, 0x7b, 0x0e, 0xa5, 0x5a, 0x55, 0xed, 0x16, 0x21, 0x0b, 0xd1, 0x0b, 0xa2, 0x92,
	0x51, 0xdb, 0x7f, 0x40, 0xb9, 0xf4, 0xc0, 0x85, 0xe6, 0x92, 0xdc, 0x6c, 0x33, 0xc2, 0x9b, 0xe0,
	0x5d, 0x67, 0x77, 0x1d, 0x91, 0x7f, 0x91, 0x63, 0x7e, 0x52, 0x8e, 0x9c, 0xa2, 0x1c, 0x23, 0xf8,
	0x23, 0x91, 0xd7, 0xe6, 0x43, 0xc6, 0x91, 0x72, 0xf3, 0x7b, 0x6f, 0xfc, 0x66, 0xde, 0xce, 0x00,
	0x0d, 0x43, 0x8f, 0x2f, 0xc6, 0x8c, 0x07, 0xc8, 0x35, 0xbb, 0xc3, 0xb1, 0x5e, 0xbb, 0xb1, 0x14,
	0x5a, 0x90, 0x8e, 0x51, 0xdc, 0x83, 0x32, 0x78, 0xb4, 0x81, 0xcc, 0xd4, 0xf2, 0x3f, 0xf2, 0xc5,
	0x5f, 0x89, 0x9e, 0xc6, 0x89, 0x64, 0x3e, 0x92, 0x2e, 0xb4, 0x62, 0x29, 0x62, 0xa1, 0x50, 0xd2,
	0x7a, 0xdf, 0x1a, 0xb6, 0xe7, 0x07, 0x4c, 0xbe, 0x40, 0x5d, 0x33, 0xbd, 0x42, 0xda, 0x30, 0x42,
	0x06, 0x52, 0xd6, 0x5f, 0x89, 0xe0, 0x86, 0x36, 0xfb, 0xd6, 0xb0, 0x36, 0xcf, 0x40, 0xca, 0x2e,
	0x90, 0x8b, 0x88, 0xb6, 0xb2, 0x5a, 0x03, 0xc8, 0x57, 0x68, 0x78, 0x91, 0x48, 0xb8, 0xa6, 0x6d,
	0x53, 0x9c, 0xa3, 0xb4, 0x3a, 0x08, 0x3d, 0xc6, 0x29, 0x64, 0x1e, 0x06, 0x10, 0x0a, 0xcd, 0x20,
	0x1d, 0x4d, 0x48, 0x6a, 0x19, 0x97, 0x3d, 0x24, 0x04, 0x6a, 0xb1, 0x90, 0x9a, 0xda, 0x86, 0x36,
	0xdf, 0xa4, 0x07, 0xed, 0x20, 0xf4, 0x38, 0xc7, 0xd5, 0xbf, 0x29, 0xad, 0x1a, 0xe1, 0x48, 0x90,
	0x11, 0x7c, 0xd6, 0x2c, 0x42, 0x91, 0xe8, 0x0b, 0x16, 0xa1, 0xd2, 0x5e, 0x14, 0xd3, 0x9a, 0x69,
	0x76, 0xc6, 0x0f, 0x2e, 0xe1, 0xfb, 0x4c, 0x2d, 0xa7, 0x4c, 0x69, 0xc9, 0xfc, 0x24, 0x7f, 0x99,
	0x39, 0xde, 0x26, 0xa8, 0x34, 0xf9, 0x04, 0xb6, 0x16, 0xf9, 0x3c, 0xb6, 0x16, 0xc7, 0xa0, 0x76,
	0x79, 0xd0, 0xea, 0x69, 0xd0, 0x41, 0x0f, 0xba, 0x65, 0xd6, 0x2a, 0x16, 0x5c, 0x61, 0xae, 0x16,
	0x56, 0xb2, 0x57, 0x7f, 0x3f, 0x5b, 0x50, 0x9d, 0xa9, 0x25, 0x09, 0xa0, 0x53, 0xdc, 0xda, 0x0f,
	0xb7, 0xb0, 0x5e, 0xf7, 0xdc, 0xa7, 0xfb, 0xf3, 0x03, 0x45, 0xfb, 0x66, 0xe4, 0x1a, 0x3a, 0x85,
	0x29, 0xc9, 0xa8, 0xec, 0xff, 0xf2, 0x57, 0x2a, 0xef, 0xf5, 0x4e, 0xec, 0xc9, 0xaf, 0xa7, 0xad,
	0x63, 0x6d, 0xb6, 0x8e, 0xf5, 0xba, 0x75, 0xac, 0x87, 0x9d, 0x53, 0xd9, 0xec, 0x9c, 0xca, 0xcb,
	0xce, 0xa9, 0x5c, 0x7d, 0xcb, 0xee, 0x79, 0x7d, 0x7a, 0xd1, 0xf7, 0x31, 0x2a, 0xbf, 0x61, 0xae,
	0xfa, 0xcf, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x78, 0xa9, 0xd1, 0xf1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendCreateBribe(ctx context.Context, in *MsgSendCreateBribe, opts ...grpc.CallOption) (*MsgSendCreateBribeResponse, error)
	DistributeBribe(ctx context.Context, in *MsgDistributeBribeRequest, opts ...grpc.CallOption) (*MsgDistributeBribeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendCreateBribe(ctx context.Context, in *MsgSendCreateBribe, opts ...grpc.CallOption) (*MsgSendCreateBribeResponse, error) {
	out := new(MsgSendCreateBribeResponse)
	err := c.cc.Invoke(ctx, "/hhand.incentive.Msg/SendCreateBribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DistributeBribe(ctx context.Context, in *MsgDistributeBribeRequest, opts ...grpc.CallOption) (*MsgDistributeBribeResponse, error) {
	out := new(MsgDistributeBribeResponse)
	err := c.cc.Invoke(ctx, "/hhand.incentive.Msg/DistributeBribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendCreateBribe(context.Context, *MsgSendCreateBribe) (*MsgSendCreateBribeResponse, error)
	DistributeBribe(context.Context, *MsgDistributeBribeRequest) (*MsgDistributeBribeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendCreateBribe(ctx context.Context, req *MsgSendCreateBribe) (*MsgSendCreateBribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCreateBribe not implemented")
}
func (*UnimplementedMsgServer) DistributeBribe(ctx context.Context, req *MsgDistributeBribeRequest) (*MsgDistributeBribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeBribe not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendCreateBribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendCreateBribe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendCreateBribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hhand.incentive.Msg/SendCreateBribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendCreateBribe(ctx, req.(*MsgSendCreateBribe))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DistributeBribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDistributeBribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DistributeBribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hhand.incentive.Msg/DistributeBribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DistributeBribe(ctx, req.(*MsgDistributeBribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hhand.incentive.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCreateBribe",
			Handler:    _Msg_SendCreateBribe_Handler,
		},
		{
			MethodName: "DistributeBribe",
			Handler:    _Msg_DistributeBribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hhand/incentive/tx.proto",
}

func (m *MsgSendCreateBribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCreateBribe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCreateBribe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Chain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x50
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x42
	}
	if m.Block != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Port) > 0 {
		i -= len(m.Port)
		copy(dAtA[i:], m.Port)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Port)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDistributeBribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDistributeBribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDistributeBribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDistributeBribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDistributeBribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDistributeBribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendCreateBribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendCreateBribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendCreateBribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendCreateBribe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovTx(uint64(m.Block))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	if m.Chain != 0 {
		n += 1 + sovTx(uint64(m.Chain))
	}
	return n
}

func (m *MsgDistributeBribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgDistributeBribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendCreateBribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendCreateBribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCreateBribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCreateBribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDistributeBribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDistributeBribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDistributeBribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDistributeBribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDistributeBribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDistributeBribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendCreateBribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendCreateBribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendCreateBribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
